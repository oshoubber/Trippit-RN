{"version":3,"file":"index.mjs","sources":["../src/index.js"],"sourcesContent":["/*global fetch, POLYFILL_FETCH*/\n'use strict';\nvar qs = require('querystring');\nPOLYFILL_FETCH\n\nconst DISTANCE_API_URL = 'https://maps.googleapis.com/maps/' +\n  'api/distancematrix/json?';\nconst requestError = (err, callback) => {\n  callback(new Error('Request error: Could not fetch data from Google\\'s servers: ' + err));\n}\n\n/**\n * An object that caches keys for use with the Google Distance Matrix API.\n * @type {GoogleDistance}\n */\nclass GoogleDistance {\n  /**\n   * Sets keys necessary to access the Google Distance Matrix API.\n   * @method\n   * @param  {Object} namedArgs an object for destructuring named arguments\n   * @param {String|undefined} namedArgs.apiKey your api key\n   * @param {String|undefined} namedArgs.businessClientKey your business client key\n   * @param {String|undefined} namedArgs.businessSignatureKey your business signaturek ey\n   * @return {GoogleDistance} a GoogleDistance object.\n   */\n  constructor(namedArgs={}){\n    let {apiKey, businessClientKey, businessSignatureKey} = namedArgs;\n    this.apiKey = apiKey || '';\n    this.businessClientKey = businessClientKey || '';\n    this.businessSignatureKey =  businessSignatureKey || '';\n  }\n  /**\n   * Processes input options and calls the API.\n   * @method\n   * @param  {Object}   args     Options to pass to the API.\n   * @param  {Function} callback a callback to handle (err, success)\n   * @return {undefined}\n   */\n  get(args, callback){\n    const options = this.formatOptions(args);\n    this.fetchData(options, (err, data)=>{\n      if (err) callback(err);\n      this.formatResults(data, options, function(err, results) {\n        if (err) callback(err);\n        return callback(null, results);\n      });\n    });\n  }\n  /**\n   * Preprocesses the options to pass the Google API\n   * @param  {Object} args options to pass the Google API\n   * @return {Object}\n   * @throws {Error} if any invalid origins / destinations are input\n   */\n  formatOptions(args){\n    let {\n      index, origin, origins, destination, destinations, mode, units, language,\n      avoid, sensor\n    } = args;\n    let {key, businessClientKey, businessSignatureKey} = this;\n    let batchMode = false;\n    // enforce defaults\n    index    = index    || null;\n    mode     = mode     || 'driving';\n    units    = units    || 'metric';\n    language = language || 'en';\n    avoid    = avoid    || null;\n    sensor   = sensor   || false;\n\n    const check = (singular, plural, success) => {\n      var okString = (singular || {}).constructor == String && singular.length;\n      const okArray = Array.isArray(plural) && plural.length;\n      if (!okString && okArray){\n        success(plural.join('|'));\n        batchMode = true;\n      } else if (!okArray && okString){\n        success(singular);\n      } else {\n        throw new Error(\n          `invalid option values: ${JSON.stringify(singular)}, ` +\n            JSON.stringify(plural)\n          )\n      }\n    }\n    check(origin, origins, checked => origins = checked);\n    check(destination, destinations, checked => destinations = checked);\n    return Object.assign(\n      {index, origins, destinations, mode, units, language, avoid, sensor},\n      batchMode && {batchMode}, //only include batchMode if true\n      businessClientKey && businessSignatureKey\n        ? {businessClientKey, businessSignatureKey}\n        : {key}\n    );\n  }\n  /**\n   * Formats the results to... something\n   * @method\n   * @param  {Object}   data     a response as seen at\n   * @param  {Object]}   options  ...\n   * @param  {Function} callback error/success handler function(err, data)\n   * @return {Object|Object[]} An array of processed result elements\n   */\n  formatResults(data, options, callback) {\n    /**\n     * Processes one element of an API response\n     * @function\n     * @param  {element} element\n     * @return {Object} { index, distance, duration, durationValue, origin,\n     *  destination, mode, units, avoid, sensor }\n     */\n    const formatData = element => {\n      return {\n        index: options.index,\n        distance: element.distance.text,\n        distanceValue: element.distance.value,\n        duration: element.duration.text,\n        durationValue: element.duration.value,\n        origin: element.origin,\n        destination: element.destination,\n        mode: options.mode,\n        units: options.units,\n        language: options.language,\n        avoid: options.avoid,\n        sensor: options.sensor\n      };\n    };\n\n    if (data.status != 'OK') {\n      return callback(\n        new Error(`Status error: ${data.status}: ${data.error_message}`)\n      );\n    }\n    let results = [];\n\n    for (let i = 0; i < data.origin_addresses.length; i++) {\n      for (var j = 0; j < data.destination_addresses.length; j++) {\n        var element = data.rows[i].elements[j];\n        let {status} = element;\n        if (status != 'OK') return callback(new Error(`Result error: ${status}`));\n        element.origin = data.origin_addresses[i];\n        element.destination = data.destination_addresses[j];\n\n        results.push(formatData(element));\n      }\n    }\n\n    if (results.length == 1 && !options.batchMode) {\n      results = results[0];\n    }\n    return callback(null, results);\n  }\n  /**\n   * Fetches data\n   * @param  {Object}   options  see formatResults's return\n   * @param  {Function} callback Error/success handler function(err, data)\n   * @return {undefined}\n   */\n  fetchData(options, callback) {\n    fetch(DISTANCE_API_URL + qs.stringify(options))\n      .then((response) => {\n        if(response.status != 200) {\n          let error = new Error(response.statusText);\n          error.response = response;\n          throw error;\n        }\n        return response;\n      })\n      .then((response) => response.json())\n      .then((response) => {\n        callback(null, response);\n      })\n      .catch ((error) => {\n        requestError(error, callback);\n      });\n  }\n}\n// export {GoogleDistance};\nexport default new GoogleDistance;\n"],"names":[],"mappings":"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"}