{"version":3,"file":"index.common.js","sources":["../src/index.js"],"sourcesContent":["/*global fetch, POLYFILL_FETCH*/\n'use strict';\nvar qs = require('querystring');\nPOLYFILL_FETCH\n\nconst DISTANCE_API_URL = 'https://maps.googleapis.com/maps/' +\n  'api/distancematrix/json?';\nconst requestError = (err, callback) => {\n  callback(new Error('Request error: Could not fetch data from Google\\'s servers: ' + err));\n}\n\n/**\n * An object that caches keys for use with the Google Distance Matrix API.\n * @type {GoogleDistance}\n */\nclass GoogleDistance {\n  /**\n   * Sets keys necessary to access the Google Distance Matrix API.\n   * @method\n   * @param  {Object} namedArgs an object for destructuring named arguments\n   * @param {String|undefined} namedArgs.apiKey your api key\n   * @param {String|undefined} namedArgs.businessClientKey your business client key\n   * @param {String|undefined} namedArgs.businessSignatureKey your business signaturek ey\n   * @return {GoogleDistance} a GoogleDistance object.\n   */\n  constructor(namedArgs={}){\n    let {apiKey, businessClientKey, businessSignatureKey} = namedArgs;\n    this.apiKey = apiKey || '';\n    this.businessClientKey = businessClientKey || '';\n    this.businessSignatureKey =  businessSignatureKey || '';\n  }\n  /**\n   * Processes input options and calls the API.\n   * @method\n   * @param  {Object}   args     Options to pass to the API.\n   * @param  {Function} callback a callback to handle (err, success)\n   * @return {undefined}\n   */\n  get(args, callback){\n    const options = this.formatOptions(args);\n    this.fetchData(options, (err, data)=>{\n      if (err) callback(err);\n      this.formatResults(data, options, function(err, results) {\n        if (err) callback(err);\n        return callback(null, results);\n      });\n    });\n  }\n  /**\n   * Preprocesses the options to pass the Google API\n   * @param  {Object} args options to pass the Google API\n   * @return {Object}\n   * @throws {Error} if any invalid origins / destinations are input\n   */\n  formatOptions(args){\n    let {\n      index, origin, origins, destination, destinations, mode, units, language,\n      avoid, sensor\n    } = args;\n    let {key, businessClientKey, businessSignatureKey} = this;\n    let batchMode = false;\n    // enforce defaults\n    index    = index    || null;\n    mode     = mode     || 'driving';\n    units    = units    || 'metric';\n    language = language || 'en';\n    avoid    = avoid    || null;\n    sensor   = sensor   || false;\n\n    const check = (singular, plural, success) => {\n      var okString = (singular || {}).constructor == String && singular.length;\n      const okArray = Array.isArray(plural) && plural.length;\n      if (!okString && okArray){\n        success(plural.join('|'));\n        batchMode = true;\n      } else if (!okArray && okString){\n        success(singular);\n      } else {\n        throw new Error(\n          `invalid option values: ${JSON.stringify(singular)}, ` +\n            JSON.stringify(plural)\n          )\n      }\n    }\n    check(origin, origins, checked => origins = checked);\n    check(destination, destinations, checked => destinations = checked);\n    return Object.assign(\n      {index, origins, destinations, mode, units, language, avoid, sensor},\n      batchMode && {batchMode}, //only include batchMode if true\n      businessClientKey && businessSignatureKey\n        ? {businessClientKey, businessSignatureKey}\n        : {key}\n    );\n  }\n  /**\n   * Formats the results to... something\n   * @method\n   * @param  {Object}   data     a response as seen at\n   * @param  {Object]}   options  ...\n   * @param  {Function} callback error/success handler function(err, data)\n   * @return {Object|Object[]} An array of processed result elements\n   */\n  formatResults(data, options, callback) {\n    /**\n     * Processes one element of an API response\n     * @function\n     * @param  {element} element\n     * @return {Object} { index, distance, duration, durationValue, origin,\n     *  destination, mode, units, avoid, sensor }\n     */\n    const formatData = element => {\n      return {\n        index: options.index,\n        distance: element.distance.text,\n        distanceValue: element.distance.value,\n        duration: element.duration.text,\n        durationValue: element.duration.value,\n        origin: element.origin,\n        destination: element.destination,\n        mode: options.mode,\n        units: options.units,\n        language: options.language,\n        avoid: options.avoid,\n        sensor: options.sensor\n      };\n    };\n\n    if (data.status != 'OK') {\n      return callback(\n        new Error(`Status error: ${data.status}: ${data.error_message}`)\n      );\n    }\n    let results = [];\n\n    for (let i = 0; i < data.origin_addresses.length; i++) {\n      for (var j = 0; j < data.destination_addresses.length; j++) {\n        var element = data.rows[i].elements[j];\n        let {status} = element;\n        if (status != 'OK') return callback(new Error(`Result error: ${status}`));\n        element.origin = data.origin_addresses[i];\n        element.destination = data.destination_addresses[j];\n\n        results.push(formatData(element));\n      }\n    }\n\n    if (results.length == 1 && !options.batchMode) {\n      results = results[0];\n    }\n    return callback(null, results);\n  }\n  /**\n   * Fetches data\n   * @param  {Object}   options  see formatResults's return\n   * @param  {Function} callback Error/success handler function(err, data)\n   * @return {undefined}\n   */\n  fetchData(options, callback) {\n    fetch(DISTANCE_API_URL + qs.stringify(options))\n      .then((response) => {\n        if(response.status != 200) {\n          let error = new Error(response.statusText);\n          error.response = response;\n          throw error;\n        }\n        return response;\n      })\n      .then((response) => response.json())\n      .then((response) => {\n        callback(null, response);\n      })\n      .catch ((error) => {\n        requestError(error, callback);\n      });\n  }\n}\n// export {GoogleDistance};\nexport default new GoogleDistance;\n"],"names":["qs","require","DISTANCE_API_URL","requestError","err","callback","Error","GoogleDistance","namedArgs","apiKey","businessClientKey","businessSignatureKey","args","options","formatOptions","fetchData","data","formatResults","results","index","origin","origins","destination","destinations","mode","units","language","avoid","sensor","key","batchMode","check","singular","plural","success","okString","constructor","String","length","okArray","Array","isArray","join","JSON","stringify","checked","Object","assign","formatData","element","distance","text","value","duration","status","error_message","i","origin_addresses","j","destination_addresses","rows","elements","push","then","response","error","statusText","json","catch"],"mappings":"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"}